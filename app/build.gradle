plugins {
    id "org.sonarqube" version "2.5"
}

apply plugin: 'com.android.application'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'

android {
    compileSdkVersion 34
    buildToolsVersion "34.0.0"

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        applicationId "app.varlorg.unote"
        minSdkVersion propMinSdkVersion
        targetSdkVersion propTargetSdkVersion
        versionCode propVersionCode
        versionName propVersionName

        buildConfigField "String", "applicationId", "\"app.varlorg.unote\""
        //resConfigs("mdpi", "hdpi", "xhdpi", "xxhdpi", "anydpi")
        resConfigs("mdpi","hdpi", "xhdpi", "xxhdpi", "anydpi")
    }

    namespace "app.varlorg.unote"
    testNamespace "app.varlorg.unoteTest"

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testCoverageEnabled false
        }
        debug {
            debuggable true
            testCoverageEnabled = true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    testOptions {
        reportDir = "$project.buildDir/test/report"
    }
}

dependencies {
    implementation project(':colopicker')
    //implementation project('mylibrary')
    testImplementation 'junit:junit:4.12'
    //implementation 'com.github.yukuku:ambilwarna:2.0.1'
    //compile 'com.android.support:appcompat-v7:23.1.1'
}

android { lintOptions { disable 'MissingTranslation' } }

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }
    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                classDirectories = fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                        excludes: [
                                '**/R.class',
                                '**/R$*.class',
                                '**/*$ViewInjector*.*',
                                '**/*$ViewBinder*.*',
                                '**/BuildConfig.*',
                                '**/Manifest*.*'
                        ]
                )

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                reports {
                    html {
                        enabled true   
                    }
                    xml {
                        enabled true   
                    }
                }
            }
        }
    }
}

